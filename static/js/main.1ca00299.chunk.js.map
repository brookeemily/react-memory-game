{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Header/Header.js","components/ImageCard/Images.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Header","currentScore","topScore","ImageCard","alt","name","src","image","onClick","checkClick","id","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","images","bind","assertThisInitialized","imageClicked","filter","imageShuffle","slice","sort","b","Math","random","clicked","resetImageShuffle","map","setState","findIndex","_this2","components_Wrapper_Wrapper","components_Header_Header","Images","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uuFAMeA,SAFC,SAAAC,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,YCgB1CC,SAhBA,SAAAN,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,eACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,UAA+CJ,EAAMO,aAArD,iBAAiFP,EAAMQ,SAAvF,MAGDP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,mFCCMK,SAZG,SAAAT,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OACEO,IAAKV,EAAMW,KACXC,IAAKZ,EAAMa,MACXC,QAAS,kBAAMd,EAAMe,WAAWf,EAAMgB,kBCsEjCC,cAvEb,SAAAA,EAAYjB,GAAO,IAAAkB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMrB,KACDyB,MAAQ,CACXC,OAAQA,EACRlB,SAAU,EACVD,aAAc,GAEhBW,EAAKH,WAAaG,EAAKH,WAAWY,KAAhBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAPDA,0EAWRF,GAET,IAAIa,EAAeR,KAAKI,MAAMC,OAAOI,OAAO,SAAAjB,GAAK,OAAIA,EAAMG,KAAOA,IAAI,GAElEe,EAAeV,KAAKI,MAAMC,OAAOM,QAAQC,KAAK,SAAS/B,EAAGgC,GAC5D,MAAO,GAAMC,KAAKC,WAGpB,GAAKP,EAAaQ,QAkBb,CACH,IAAIC,EAAoBP,EAAaQ,IAAI,SAAA1B,GACvC,MAAO,CACLG,GAAIH,EAAMG,GACVH,MAAOA,EAAMA,MACbwB,SAAS,KAIbhB,KAAKmB,SAAS,CACZd,OAAQY,EACR/B,aAAc,SA5BhBsB,EAAaQ,SAAU,EACvBN,EACEA,EAAaU,UAAU,SAAA5B,GAAK,OAAIA,EAAMG,KAAOA,KAC3Ca,EAGJR,KAAKmB,SAAS,CACZd,OAAQK,EACRxB,aAAcc,KAAKI,MAAMlB,aAAe,EACxCC,SACEa,KAAKI,MAAMlB,aAAe,EAAIc,KAAKI,MAAMjB,SACrCa,KAAKI,MAAMlB,aAAe,EAC1Bc,KAAKI,MAAMjB,4CAqBd,IAAAkC,EAAArB,KACP,OACEpB,EAAAC,EAAAC,cAACwC,EAAD,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,CAAQrC,aAAcc,KAAKI,MAAMlB,aAAcC,SAAUa,KAAKI,MAAMjB,WACnEa,KAAKI,MAAMC,OAAOa,IAAI,SAAA1B,GAAK,OAC1BZ,EAAAC,EAAAC,cAAC0C,EAAD,CACE9B,WAAY2B,EAAK3B,WACjB+B,IAAKjC,EAAMG,GACXA,GAAIH,EAAMG,GACVL,KAAME,EAAMF,KACZE,MAAOA,EAAMA,kBAjEPkC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1ca00299.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Wrapper.css\";\n\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Header.css\";\n\n\nconst Header = props => (\n  <div className=\"container-fluid\">\n\n    <nav className=\"navbar\">\n     <span className=\"navbar-brand mb-0 h1\">Clicky Game</span>\n     <span className=\"navbar-brand mb-0 h1\">Score: {props.currentScore} | Top Score: {props.topScore} </span>\n    </nav>\n\n    <div className=\"jumbotron\">\n         <h1 className=\"text-center\">Memory Game</h1> \n         <h3 className=\"text-center\">Click on an image to start - don't click on the same image more than once! </h3>\n    </div>\n\n  </div>\n);\n\nexport default Header;\n","import React from \"react\";\nimport \"./ImageCard.css\";\n\nconst ImageCard = props => (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img\n          alt={props.name}\n          src={props.image}\n          onClick={() => props.checkClick(props.id)}\n        />\n      </div>\n    </div>\n);\n\nexport default ImageCard;\n","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport ImageCard from \"./components/ImageCard\";\nimport images from \"../src/images.json\";\n\nclass App extends Component {\n  // Set this.state.images to the images json array\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: images,\n      topScore: 0,\n      currentScore: 0\n    };\n    this.checkClick = this.checkClick.bind(this);\n  }\n\n  // Function that checks if an image has been clicked\n  checkClick(id) {\n    //  set image clicked variable by finding the id of the clicked image\n    let imageClicked = this.state.images.filter(image => image.id === id)[0];\n    // shuffle the images\n    let imageShuffle = this.state.images.slice().sort(function(a, b) {\n      return 0.5 - Math.random();\n    });\n    // set the click state if the image has not been clicked before\n    if (!imageClicked.clicked) {\n      imageClicked.clicked = true;\n      imageShuffle[\n        imageShuffle.findIndex(image => image.id === id)\n      ] = imageClicked;\n\n      // increment the score and shuffle the images\n      this.setState({\n        images: imageShuffle,\n        currentScore: this.state.currentScore + 1,\n        topScore:\n          this.state.currentScore + 1 > this.state.topScore\n            ? this.state.currentScore + 1\n            : this.state.topScore\n      });\n    }\n\n    //  if the image has already been clicked, set clicked to false and restart game\n    else {\n      let resetImageShuffle = imageShuffle.map(image => {\n        return {\n          id: image.id,\n          image: image.image,\n          clicked: false\n        };\n      });\n      //  set score to 0 and shuffle images\n      this.setState({\n        images: resetImageShuffle,\n        currentScore: 0\n      });\n    }\n  }\n  // Map over this.state.images to render an ImageCard component for each image\n  render() {\n    return (\n      <Wrapper>\n        <Header currentScore={this.state.currentScore} topScore={this.state.topScore}/>\n        {this.state.images.map(image => (\n          <ImageCard\n            checkClick={this.checkClick}\n            key={image.id}\n            id={image.id}\n            name={image.name}\n            image={image.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}